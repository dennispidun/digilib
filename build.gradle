buildscript {
    ext {
        springBootVersion = '2.2.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'com.moowork.node' version '1.2.0'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


group = 'de.unihildesheim'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

ext['springCloudVersion'] = 'Greenwich.RC2'

dependencies {
    runtimeOnly 'mysql:mysql-connector-java'

    compile 'org.projectlombok:lombok:1.18.8'
    compile "org.springframework.boot:spring-boot-starter-mail"

    compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springBootVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testCompile 'org.junit.jupiter:junit-jupiter:5.5.2'
    testCompile 'org.mockito:mockito-core:2.21.0'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.h2database:h2'

    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

node {
    download = false
    npmWorkDir = file("${project.buildDir}/npm")
    nodeModulesDir = file("${project.projectDir}/client")
}

task buildWithoutTest(type: NpmTask) {
    args = ['run', 'buildWithoutTest']
}

task clientTest(type: NpmTask) {
    args = ['run', 'testCi']
}

task deleteStaticFolder(type: Delete) {
    delete 'src/main/resources/static'
}

task copyResources(type: Copy) {
    mustRunAfter processResources
    dependsOn buildWithoutTest
    dependsOn deleteStaticFolder

    from 'client/dist/client' into 'src/main/resources/static'
}
